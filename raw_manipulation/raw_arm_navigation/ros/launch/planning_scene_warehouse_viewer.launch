<?xml version="1.0"?>
<launch>

	<!--node pkg="robot_state_publisher" type="state_publisher" name="rob_st_pub" /-->

	<!-- database -->
	<param name="warehouse_host" value="localhost"/>
	<param name="warehouse_port" value="27020"/>
	<node pkg="mongodb" type="wrapper.py" name="mongo" output="screen">
		<param name="overwrite" value="false"/>
		<param name="database_path" value="arm_navigation_dbs/youbot"/>
	</node>

	<node pkg="move_arm_warehouse" type="planning_scene_warehouse_viewer" name="planning_scene_warehouse_viewer" output="screen" />

	<node pkg="rviz" type="rviz" name='rviz_warehouse_viewer' args="-d $(find youbot_arm_navigation)/ros/config/planning_scene_warehouse_viewer.vcg" />


	<!-- Called when left arm executes trajectory using controllers -->
	<param name="execute_left_trajectory" value="/arm_1/arm_controller/joint_trajectory_action" />
	<!-- Called when right arm executes trajectory using controllers -->
	<param name="execute_right_trajectory" value="/arm_1/arm_controller/joint_trajectory_action" />
	<!-- Called to get left arm inverse kinematics with collision checking -->
	<param name="left_ik_name" value="/youbot_arm_kinematics/get_constraint_aware_ik" />
	<!-- Called to get right arm inverse kinematics with collision checking -->
	<param name="right_ik_name" value="/youbot_arm_kinematics/get_constraint_aware_ik" />
	<!-- Called to get left arm inverse kinematics without collision checking -->
	<param name="non_coll_left_ik_name" value="/youbot_arm_kinematics/get_ik" />
	<!-- Called to get right arm inverse kinematics without collision checking -->
	<param name="non_coll_right_ik_name" value="/youbot_arm_kinematics/get_ik" />
	<!-- Kinematic chain group name representing the left arm -->
	<param name="left_arm_group" value="arm" />
	<!-- Kinematic chain group name representing the right arm -->
	<param name="right_arm_group" value="arm" />
	<!-- Degree of freedom representing inverse kinematics redundancy on the left arm -->
	<param name="left_redundancy" value="none" />
	<!-- Degree of freedom representing inverse kinematics redundancy on the right arm -->
	<param name="right_redundancy" value="none" />
	<!-- Link on the left arm to perform inverse kinematics for -->
	<param name="left_ik_link" value="arm_link_5" />
	<!-- Link on the right arm to perform inverse kinematics for -->
	<param name="right_ik_link" value="arm_link_5" />
	<!-- Called to plan trajectories given motion plan requests -->
	<param name="planner_service_name" value="/ompl_planning/plan_kinematic_path" />
	<!-- Interpolates between end effector positions for the left arm -->
	<param name="left_interpolate_service_name" value="/interpolated_ik_motion_plan" />
	<!-- Interpolates between end effector positions for the right arm -->
	<param name="right_interpolate_service_name" value="/interpolated_ik_motion_plan" />
	<!-- Called to smooth and optimize a planner trajectory -->
	<param name="trajectory_filter_service_name" value="/trajectory_filter/filter_trajectory_with_constraints" />
	<!-- Called to get the proximity space -->
	<param name="proximity_space_service_name" value="/collision_proximity/get_distance_aware_plan" />
	<!-- Called to get collision validity of robot state -->
	<param name="proximity_space_validity_name" value="/collision_proximity/get_state_validity"/>
	<!-- Called to produce a plan that pulls trajectories out of collision -->
	<param name="proximity_space_planner_name" value="/collision_proximity_planner/plan"/>
	<!-- Called to send the planning scene to the environment server -->
	<param name="set_planning_scene_diff_name" value="/environment_server/set_planning_scene_diff"/>
	
	<param name="vis_topic_name" value="/planning_scene_visualizer_markers"/>
	
</launch>
