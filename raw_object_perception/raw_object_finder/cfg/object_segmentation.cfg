#!/usr/bin/env python
import roslib;roslib.load_manifest('raw_object_finder')

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("camera_frame", str_t, 0, "Autogenerated parameter based on model.", "/openni_rgb_optical_frame")
gen.add("extract_obj_in_rgb_img", bool_t, 0, "Autogenerated parameter based on model.", False)
gen.add("min_x", double_t, 0, "Autogenerated parameter based on model.", 0.25, 0, 100)
gen.add("max_x", double_t, 0, "Autogenerated parameter based on model.", 1.5, 0, 100)
gen.add("min_y", double_t, 0, "Autogenerated parameter based on model.", -1.0, 0, 100)
gen.add("max_y", double_t, 0, "Autogenerated parameter based on model.", 1.0, 0, 100)
gen.add("min_z", double_t, 0, "Autogenerated parameter based on model.", -0.1, 0, 100)
gen.add("max_z", double_t, 0, "Autogenerated parameter based on model.", 1.0, 0, 100)
gen.add("threshold_points_above_lower_plane", double_t, 0, "Autogenerated parameter based on model.", 0.01, 0, 100)
gen.add("downsampling_distance", double_t, 0, "Autogenerated parameter based on model.", 0.005, 0, 100)
gen.add("min_points_per_objects", int_t, 0, "Autogenerated parameter based on model.", 11, 0, 100)
gen.add("spherical_distance", double_t, 0, "Autogenerated parameter based on model.", 2.5, 0, 100)
gen.add("point_cloud_in", str_t, 0, "Autogenerated parameter based on model.", "/camera/rgb/points")
gen.add("min_planar_area_size", double_t, 0, "Autogenerated parameter based on model.", 0.005, 0, 100)

exit(gen.generate("raw_object_finder", "raw_object_finder", "object_segmentation"))